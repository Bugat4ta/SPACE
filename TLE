import numpy as np

def geo_to_eci(latitude, longitude):
    lat_rad = np.radians(latitude)
    lon_rad = np.radians(longitude)
    R = 6371e3
    x = R * np.cos(lat_rad) * np.cos(lon_rad)
    y = R * np.cos(lat_rad) * np.sin(lon_rad)
    z = R * np.sin(lat_rad)
    return np.array([x, y, z])

def compute_position(inclination, raan, eccentricity, arg_perigee, mean_anomaly):
    G = 6.67430e-11
    M_earth = 5.972e24
    inclination = np.radians(inclination)
    raan = np.radians(raan)
    arg_perigee = np.radians(arg_perigee)
    n = (2 * np.pi) / 86400
    a = (G * M_earth / (n ** 2)) ** (1/3)
    M = np.radians(mean_anomaly)
    r = a * (1 - eccentricity ** 2) / (1 + eccentricity * np.cos(M))
    x_orbit = r * np.cos(M)
    y_orbit = r * np.sin(M)
    position_eci = np.array([
        x_orbit * (np.cos(raan) * np.cos(arg_perigee) - np.sin(raan) * np.sin(arg_perigee) * np.cos(inclination)),
        y_orbit * (np.sin(raan) * np.cos(arg_perigee) + np.cos(raan) * np.sin(arg_perigee) * np.cos(inclination)),
        y_orbit * (np.sin(arg_perigee) * np.sin(inclination))
    ])
    return position_eci

def calculate_distance_and_time(inclination, raan, eccentricity, arg_perigee, M1, M2):
    position1 = compute_position(inclination, raan, eccentricity, arg_perigee, M1)
    position2 = compute_position(inclination, raan, eccentricity, arg_perigee, M2)
    distance = np.linalg.norm(position2 - position1)
    n = (2 * np.pi) / 86400
    M1_rad = np.radians(M1)
    M2_rad = np.radians(M2)
    time_difference = (M2_rad - M1_rad) / n
    if time_difference < 0:
        time_difference += (2 * np.pi) / n
    return distance, time_difference

coordinates_1 = (48.0, -40.0)
coordinates_2 = (47.0, -3.0)
eci_coordinates_1 = geo_to_eci(*coordinates_1)
eci_coordinates_2 = geo_to_eci(*coordinates_2)

M1 = 30.0
M2 = 60.0
inclination = 51.6451
raan = 59.0282
eccentricity = 0.0003203
arg_perigee = 353.2771

distance, time_difference = calculate_distance_and_time(inclination, raan, eccentricity, arg_perigee, M1, M2)

print(f"Distance between points: {distance:.2f} meters")
print(f"Time to move from M1 to M2: {time_difference:.2f} seconds")

